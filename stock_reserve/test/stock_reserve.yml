-
  I force recomputation of stock.location parent left/right
-
  !python {model: stock.location}:
    # we need this because when running the tests at install time as is done on
    # Travis, the hook performing this operation for the new stock reservation
    # location is run after the test execution. This causes the stock level
    # computation to be wrong at the time the tests are run.
    self._parent_store_compute()
-
  I create a product to test the stock reservation
-
  !record {model: product.product, id: product_sorbet}:
    default_code: 001SORBET
    name: Sorbet
    type: product
    categ_id: product.product_category_1
    list_price: 100.0
    standard_price: 70.0
    uom_id: product.product_uom_kgm
    uom_po_id: product.product_uom_kgm
-
  I create a stock orderpoint for the product
-
  !record {model: stock.warehouse.orderpoint, id: sorbet_orderpoint}:
    warehouse_id: stock.warehouse0
    location_id: stock.stock_location_stock
    product_id: product_sorbet
    product_uom: product.product_uom_kgm
    product_min_qty: 4.0
    product_max_qty: 15.0
-
  I update the current stock of the Sorbet with 10 kgm
-
  !record {model: stock.change.product.qty, id: change_qty}:
    new_quantity: 10
    product_id: product_sorbet
-
  !python {model: stock.change.product.qty}: |
    self.browse(ref('change_qty')).change_product_qty()
-
  I check Virtual stock of Sorbet after update stock.
-
  !python {model: product.product, id: product_sorbet}: |
    assert self.virtual_available == 10, "Stock is not updated."
-
  I create a stock reservation for 6 kgm
-
 !record {model: stock.reservation, id: reserv_sorbet1}:
    product_id: product_sorbet
    product_uom_qty: 6.0
    product_uom: product.product_uom_kgm
    name: reserve 6 kg of sorbet for test
-
  I confirm the reservation
-
  !python {model: stock.reservation}: |
    self.browse(ref('reserv_sorbet1')).reserve()
-
  I create a stock reservation for 500g
-
 !record {model: stock.reservation, id: reserv_sorbet2}:
    product_id: product_sorbet
    product_uom_qty: 500
    product_uom: product.product_uom_gram
    name: reserve 500g of sorbet for test
-
  I confirm the reservation
-
  !python {model: stock.reservation, id: reserv_sorbet2}: |
    self.reserve()
-
  I check the reserved amount of the product and the template
-
  !python {model: product.product, id: product_sorbet}: |
    assert 6.5 == self.reservation_count
    assert 6.5 == self.product_tmpl_id.reservation_count
-
  Then the reservation should be assigned and have reserved a quant
-
  !python {model: stock.reservation, id: reserv_sorbet2}: |
    assert 'assigned' == self.state
    assert 1 == len(self.reserved_quant_ids)
-
  I check Virtual stock of Sorbet after update reservation
-
  !python {model: product.product, id: product_sorbet}: |
    assert 3.5 == self.virtual_available
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler()
-
  The procurement linked to the orderpoint must be in exception (no routes configured)
-
  !python {model: stock.warehouse.orderpoint}: |
    orderpoint = self.browse(ref('stock_reserve.sorbet_orderpoint'))
    assert orderpoint.procurement_ids[0].state == 'exception', 'procurement must be in exception as there is no rule for procurement'
    import math
    assert orderpoint.procurement_ids[0].product_qty == math.ceil(15 - 3.5), 'wrong product qty ordered'
-
  I release the reservation
-
  !python {model: stock.reservation}: |
    self.browse(ref('reserv_sorbet1')).release()
-
  I check Virtual stock of Sorbet after update reservation
-
  !python {model: product.product}: |
    product = self.browse(ref('stock_reserve.product_sorbet'))
    assert product.virtual_available == 9.5, "Stock is not updated."
-
  I set the validity of the second reservation to yesterday
-
  !python {model: stock.reservation}: |
    import datetime
    from odoo.tools import DEFAULT_SERVER_DATE_FORMAT
    yesterday = datetime.date.today() - datetime.timedelta(days=1)
    yesterday = yesterday.strftime(DEFAULT_SERVER_DATE_FORMAT)
    self.browse(ref('reserv_sorbet2')).write({'date_validity': yesterday})
-
  I call the function releasing expired reservations
-
  !python {model: stock.reservation}: |
    self.release_validity_exceeded()
-
  I check Virtual stock of Sorbet after update reservation
-
  !python {model: product.product}: |
    product = self.browse(ref('stock_reserve.product_sorbet'))
    product.refresh()
    assert product.virtual_available == 10.0, "Stock is not updated."

-
  I create a stock reservation for 3 kgm
-
 !record {model: stock.reservation, id: reserv_sorbet3}:
    product_id: product_sorbet
    product_uom_qty: 3.0
    product_uom: product.product_uom_kgm
    name: reserve 3 kg of sorbet for test (release on unlink)
-
  I confirm the reservation
-
  !python {model: stock.reservation}: |
    self.browse(ref('reserv_sorbet3')).reserve()

-
  I press the open_move button on reservation and test result
-
  !python {model: stock.reservation}: |
    reserv = self.browse(ref('reserv_sorbet3'))
    move = reserv.move_id
    action_dict = reserv.open_move()
    assert action_dict['res_model'] == 'stock.move', "action model is not 'stock.move'"
    assert action_dict['res_id'] == move.id, "action res_id is not correct"
    assert action_dict['id'] == ref('stock.stock_move_action'), "action not correct"
    assert action_dict['views'][0][0] == ref('stock.view_move_form'), "action view not correct"

-
  I press button 'action_view_reservations' on product variant and test result
-
  !python {model: product.product}: |
    product = self.browse(ref('product_sorbet'))
    action_dict = product.action_view_reservations()
    assert action_dict['res_model'] == 'stock.reservation', "action model is not 'stock.move'"
    assert len(action_dict['domain']) == 1, "wrong domain"
    assert action_dict['domain'][0] == ('product_id', '=', product.id), "action domain is not correct"
    assert action_dict['id'] == ref('stock_reserve.action_stock_reservation_tree'), "action not correct"
    assert action_dict['context']['search_default_draft'] == 1, "wrong context"
    assert action_dict['context']['search_default_reserved'] == 1, "wrong context"

-
  I press button 'action_view_reservations' on product template and test result
-
  !python {model: product.template}: |
    product = self.env['product.product'].browse(ref('product_sorbet'))
    product_tmpl = product.product_tmpl_id
    product_ids = product_tmpl.mapped('product_variant_ids.id')

    action_dict = product_tmpl.action_view_reservations()
    assert action_dict['res_model'] == 'stock.reservation', "action model is not 'stock.move'"
    assert len(action_dict['domain']) == 1, "wrong domain"
    assert action_dict['domain'][0][:2] == ('product_id', 'in'), "action domain is not correct"
    assert set(action_dict['domain'][0][-1]) == set(product_ids)
    assert action_dict['id'] == ref('stock_reserve.action_stock_reservation_tree'), "action not correct"
    assert action_dict['context']['search_default_draft'] == 1, "wrong context"
    assert action_dict['context']['search_default_reserved'] == 1, "wrong context"

-
  I unlink the reservation
-
  !python {model: stock.reservation}: |
    reserv = self.browse(ref('reserv_sorbet3'))
    move = reserv.move_id
    reserv.unlink()
    assert move.state == 'cancel', "Stock move not canceled."
