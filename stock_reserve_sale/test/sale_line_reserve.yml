-
  I create a product to test the stock reservation
-
 !record {model: product.product, id: product_yogurt}:
    default_code: 001yogurt
    name: yogurt
    type: product
    categ_id: product.product_category_1
    list_price: 100.0
    standard_price: 70.0
    uom_id: product.product_uom_kgm
    uom_po_id: product.product_uom_kgm
    valuation: real_time
    cost_method: average
    property_stock_account_input: account.o_expense
    property_stock_account_output: account.o_income
-
  I update the current stock of the yogurt with 10 kgm
-
  !record {model: stock.change.product.qty, id: change_qty}:
    new_quantity: 10
    product_id: product_yogurt
-
  !python {model: stock.change.product.qty}: |
    context['active_id'] = ref('product_yogurt')
    self.change_product_qty(cr, uid, [ref('change_qty')], context=context)
-
  In order to test reservation of the sales order, I create a sales order
-
  !record {model: sale.order, id: sale_reserve_02}:
    partner_id: base.res_partner_2
    payment_term: account.account_payment_term
-
  And I create a sales order line
-
  !record {model: sale.order.line, id: sale_line_reserve_02_01, view: sale.view_order_line_tree}:
    name: Yogurt
    product_id: product_yogurt
    product_uom_qty: 4
    product_uom: product.product_uom_kgm
    order_id: sale_reserve_02
-
  And I create a stock reserve for this line
-
  !python {model: sale.stock.reserve}: |
    active_id = ref('sale_line_reserve_02_01')
    context['active_id'] = active_id
    context['active_ids'] = [active_id]
    context['active_model'] = 'sale.order.line'
    wizard_id = self.create(cr, uid, {}, context=context)
    self.button_reserve(cr, uid, [wizard_id], context=context)
-
  I check Virtual stock of yogurt after update reservation
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_yogurt'), context=context)
    assert product.virtual_available == 6, "Stock is not updated."
-
  I set product_12 to MTO (doesn't work)
-
  !record {model: product.product, id: product.product_product_12}:
    route_ids:
      - stock.route_warehouse0_mto
-
  I set MTO for real
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product.product_product_12'), context=context)
    self.write(cr, uid, ref('product.product_product_12'),
               {'route_ids': [(6, False, [ref('stock.route_warehouse0_mto')])]}, context=context)
-
  And I create a MTO sales order line
-
  !record {model: sale.order.line, id: sale_line_reserve_02_02, view: sale.view_order_line_tree}:
    order_id: sale_reserve_02
    name: Mouse, Wireless
    product_id: product.product_product_12
    product_uom_qty: 4
    product_uom: product.product_uom_unit
-
  And I try to create a stock reserve for this MTO line
-
  !python {model: sale.stock.reserve}: |
    active_id = ref('sale_line_reserve_02_02')
    context['active_id'] = active_id
    context['active_ids'] = [active_id]
    context['active_model'] = 'sale.order.line'
    wizard_id = self.create(cr, uid, {}, context=context)
    self.button_reserve(cr, uid, [wizard_id], context=context)
-
  I should not have a stock reservation for a MTO line
-
  !python {model: stock.reservation}: |
    reserv_ids = self.search(
        cr, uid,
        [('sale_line_id', '=', ref('sale_line_reserve_02_02'))],
        context=context)
    assert not reserv_ids, "No stock reservation should be created for MTO lines"
-
  And I change the quantity in the first line
-
  !record {model: sale.order.line, id: sale_line_reserve_02_01, view: sale.view_order_line_tree}:
    product_uom_qty: 5
-

  I check Virtual stock of yogurt after change of reservations
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_yogurt'), context=context)
    assert product.virtual_available == 5, "Stock is not updated."
-
  I try to change the product quantity on the sale order line
-
  !python {model: sale.order.line}: |
    line = self.browse(cr, uid, ref('sale_line_reserve_02_01'), context=context)
    self.product_id_change(cr, uid, [line.id],
      line.order_id.pricelist_id.id,
      line.product_id.id,
      qty=22,
      uom=False,
      qty_uos=0,
      uos=False,
      name='',
      partner_id=ref('base.res_partner_2'),
      lang=False,
      update_tax=True,
      date_order=False,
      packaging=False,
      fiscal_position=False,
      flag=False,
      context=None)
-
  I release the sales order's reservations for the first line
-
  !python {model: sale.order.line}: |
    self.release_stock_reservation(cr, uid, [ref('sale_line_reserve_02_01')], context=context)
-
  I check Virtual stock of yogurt after release of reservations
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_yogurt'), context=context)
    assert product.virtual_available == 10, "Stock is not updated."
